// @ts-ignore
export function appTemplateHtml() { var _vm = this; var _h = _vm.$createElement; var _c = _vm._self._c || _h; return _c('div', { staticClass: "main" }, [_c('div', { staticClass: "row d-none" }, [_c('div', { staticClass: "col-md-12" }, [_c('label', [_c('input', { directives: [{ name: "model", rawName: "v-model", value: (_vm.protocol), expression: "protocol" }], attrs: { "type": "radio", "value": "WebSocket", "disabled": _vm.isConnected }, domProps: { "checked": _vm._q(_vm.protocol, "WebSocket") }, on: { "change": function ($event) { _vm.protocol = "WebSocket"; } } }), _vm._v(" WebSocket\r\n\t\t\t")]), _vm._v(" "), _c('label', [_c('input', { directives: [{ name: "model", rawName: "v-model", value: (_vm.protocol), expression: "protocol" }], attrs: { "type": "radio", "value": "HTTP", "disabled": _vm.isConnected }, domProps: { "checked": _vm._q(_vm.protocol, "HTTP") }, on: { "change": function ($event) { _vm.protocol = "HTTP"; } } }), _vm._v(" HTTP\r\n\t\t\t")]), _vm._v(" "), _c('label', [_c('input', { directives: [{ name: "model", rawName: "v-model", value: (_vm.protocol), expression: "protocol" }], attrs: { "type": "radio", "value": "TCP", "disabled": _vm.isConnected, "checked": "" }, domProps: { "checked": _vm._q(_vm.protocol, "TCP") }, on: { "change": function ($event) { _vm.protocol = "TCP"; } } }), _vm._v(" TCP\r\n\t\t\t")]), _vm._v(" "), _c('label', [_c('input', { directives: [{ name: "model", rawName: "v-model", value: (_vm.protocol), expression: "protocol" }], attrs: { "type": "radio", "value": "UDP", "disabled": _vm.isConnected }, domProps: { "checked": _vm._q(_vm.protocol, "UDP") }, on: { "change": function ($event) { _vm.protocol = "UDP"; } } }), _vm._v(" UDP\r\n\t\t\t")]), _vm._v(" "), _c('label', [_c('input', { directives: [{ name: "model", rawName: "v-model", value: (_vm.protocol), expression: "protocol" }], attrs: { "type": "radio", "value": "WebRTC", "disabled": _vm.isConnected }, domProps: { "checked": _vm._q(_vm.protocol, "WebRTC") }, on: { "change": function ($event) { _vm.protocol = "WebRTC"; } } }), _vm._v(" WebRTC\r\n\t\t\t")])])]), _vm._v(" "), (_vm.protocol === 'WebSocket' || _vm.protocol === 'HTTP') ? _c('div', { staticClass: "row" }, [_c('div', { staticClass: "col-md-10" }, [_c('input', { directives: [{ name: "model", rawName: "v-model", value: (_vm.url), expression: "url" }], staticClass: "form-control", attrs: { "id": "url", "type": "url", "placeholder": "url" }, domProps: { "value": (_vm.url) }, on: { "input": function ($event) { if ($event.target.composing) {
                        return;
                    } _vm.url = $event.target.value; } } })]), _vm._v(" "), (_vm.protocol === 'WebSocket') ? _c('div', { staticClass: "col-md-2" }, [_c('input', { directives: [{ name: "model", rawName: "v-model", value: (_vm.subprotocol), expression: "subprotocol" }], staticClass: "form-control", attrs: { "type": "text", "placeholder": "subprotocol" }, domProps: { "value": (_vm.subprotocol) }, on: { "input": function ($event) { if ($event.target.composing) {
                        return;
                    } _vm.subprotocol = $event.target.value; } } })]) : _c('div', { staticClass: "col-md-2" }, [_c('select', { directives: [{ name: "model", rawName: "v-model", value: (_vm.httpMethod), expression: "httpMethod" }], staticClass: "form-control", on: { "change": function ($event) { var $$selectedVal = Array.prototype.filter.call($event.target.options, function (o) { return o.selected; }).map(function (o) { var val = "_value" in o ? o._value : o.value; return val; }); _vm.httpMethod = $event.target.multiple ? $$selectedVal : $$selectedVal[0]; } } }, [_c('option', [_vm._v("GET")]), _vm._v(" "), _c('option', [_vm._v("POST")]), _vm._v(" "), _c('option', [_vm._v("PUT")]), _vm._v(" "), _c('option', [_vm._v("DELETE")]), _vm._v(" "), _c('option', [_vm._v("PATCH")]), _vm._v(" "), _c('option', [_vm._v("COPY")]), _vm._v(" "), _c('option', [_vm._v("HEAD")]), _vm._v(" "), _c('option', [_vm._v("OPTIONS")]), _vm._v(" "), _c('option', [_vm._v("LINK")]), _vm._v(" "), _c('option', [_vm._v("UNLINK")]), _vm._v(" "), _c('option', [_vm._v("PURGE")])])])]) : _vm._e(), _vm._v(" "), (_vm.protocol === 'TCP' || _vm.protocol === 'UDP') ? _c('div', { staticClass: "row mt-4" }, [_c('div', { staticClass: "col-md-12 mb-4" }, [(_vm.protocol !== 'HTTP' && _vm.protocol !== 'UDP' && _vm.protocol !== 'WebRTC') ? _c('button', { staticClass: "btn btn-success btn-sm mr-4", attrs: { "disabled": _vm.isConnected }, on: { "click": function ($event) { _vm.connect(); } } }, [_vm._v("\r\n\t\t\t\t连 接\r\n\t\t\t")]) : _vm._e(), _vm._v(" "), (_vm.protocol !== 'HTTP' && _vm.protocol !== 'UDP' && _vm.protocol !== 'WebRTC') ? _c('button', { staticClass: "btn btn-default btn-sm mr-4", attrs: { "disabled": _vm.isDisconnected }, on: { "click": function ($event) { _vm.close(); } } }, [_vm._v("\r\n\t\t\t\t断 开\r\n\t\t\t")]) : _vm._e(), _vm._v(" "), (_vm.protocol !== 'HTTP' && _vm.protocol !== 'UDP' && _vm.protocol !== 'WebRTC') ? _c('button', { staticClass: "btn btn-success btn-sm", on: { "click": function ($event) { _vm.showPackDeatil = !_vm.showPackDeatil; } } }, [_vm._v("\r\n\t\t\t\t查看报文\r\n\t\t\t")]) : _vm._e()]), _vm._v(" "), _c('div', { staticClass: "col-md-4" }, [_c('label', { staticClass: " control-label" }, [_vm._v("IP和端口：")]), _vm._v(" "), _vm._v("\r\n\t\t\t" + _vm._s(_vm.host) + ":" + _vm._s(_vm.port) + "\r\n\t\t\t")]), _vm._v(" "), _c('div', { staticClass: "col-md-3" }, [_c('label', { staticClass: " control-label" }, [_vm._v("主站报文：")]), _vm._v(" "), _vm._v("\r\n\t\t\t" + _vm._s(_vm.mainPack) + "\r\n\t\t\t")]), _vm._v(" "), _c('div', { staticClass: "col-md-3" }, [_c('label', { staticClass: " control-label" }, [_vm._v("从站报文：")]), _vm._v(" "), _vm._v("\r\n\t\t\t" + _vm._s(_vm.subPack) + "\r\n\t\t\t")]), _vm._v(" "), _c('div', { staticClass: "col-md-2" }, [_c('label', { staticClass: " control-label" }, [_vm._v("判断间隔：")]), _vm._v("\r\n\t\t\t" + _vm._s(_vm.timerInterval) + "秒\r\n\t\t")])]) : _vm._e(), _vm._v(" "), (_vm.protocol === 'WebRTC') ? _c('div', { staticClass: "row" }, [_c('div', { staticClass: "col-md-3" }, [_c('input', { directives: [{ name: "model", rawName: "v-model", value: (_vm.dataChannelName), expression: "dataChannelName" }], staticClass: "form-control", attrs: { "type": "text", "placeholder": "data channel" }, domProps: { "value": (_vm.dataChannelName) }, on: { "input": function ($event) { if ($event.target.composing) {
                        return;
                    } _vm.dataChannelName = $event.target.value; } } })]), _vm._v(" "), _c('div', { staticClass: "col-md-3" }, [_c('button', { staticClass: "btn btn-primary btn-sm", attrs: { "disabled": !_vm.dataChannelName || _vm.dataChannelStatus !== 'none' || !_vm.peerConnection }, on: { "click": function ($event) { _vm.createDataChannel(); } } }, [_vm._v("create\r\n\t\t\t\tdata channel")])])]) : _vm._e(), _vm._v(" "), (_vm.protocol === 'WebRTC') ? _c('div', { staticClass: "row" }, [_c('div', { staticClass: "col-md-12" }, [_c('textarea', { directives: [{ name: "model", rawName: "v-model", value: (_vm.sessionDescription), expression: "sessionDescription" }], staticClass: "form-control", staticStyle: { "width": "100%", "height": "110px" }, attrs: { "placeholder": "session description(offer or answer)" }, domProps: { "value": (_vm.sessionDescription) }, on: { "input": function ($event) { if ($event.target.composing) {
                        return;
                    } _vm.sessionDescription = $event.target.value; } } })])]) : _vm._e(), _vm._v(" "), _c('div', { staticClass: "row d-none" }, [_c('div', { staticClass: "col-md-12" }, [(_vm.protocol !== 'HTTP' && _vm.protocol !== 'UDP' && _vm.protocol !== 'WebRTC') ? _c('button', { staticClass: "btn btn-primary btn-sm", attrs: { "disabled": _vm.isConnected }, on: { "click": function ($event) { _vm.connect(); } } }, [_vm._v("connect")]) : _vm._e(), _vm._v(" "), (_vm.protocol !== 'HTTP' && _vm.protocol !== 'UDP' && _vm.protocol !== 'WebRTC') ? _c('button', { staticClass: "btn btn-default btn-sm", attrs: { "disabled": _vm.isDisconnected }, on: { "click": function ($event) { _vm.close(); } } }, [_vm._v("disconnect")]) : _vm._e(), _vm._v(" "), (_vm.protocol === 'WebSocket' || _vm.protocol === 'HTTP') ? _c('button', { staticClass: "btn btn-default btn-sm clipboard", attrs: { "data-clipboard-target": "#url" } }, [_vm._v("copy\r\n\t\t\t\tURL")]) : _vm._e(), _vm._v(" "), (_vm.protocol === 'WebSocket' || _vm.protocol === 'HTTP') ? _c('button', { staticClass: "btn btn-default btn-sm", on: { "click": function ($event) { _vm.addParameter(); } } }, [_vm._v("add\r\n\t\t\t\ta parameter")]) : _vm._e(), _vm._v(" "), (_vm.protocol === 'HTTP') ? _c('button', { staticClass: "btn btn-default btn-sm", on: { "click": function ($event) { _vm.addHeader(); } } }, [_vm._v("add a header")]) : _vm._e(), _vm._v(" "), (_vm.protocol === 'HTTP') ? _c('button', { staticClass: "btn btn-default btn-sm", on: { "click": function ($event) { _vm.addFormData(); } } }, [_vm._v("add a form data")]) : _vm._e(), _vm._v(" "), (_vm.protocol === 'WebRTC') ? _c('button', { staticClass: "btn btn-primary btn-sm", attrs: { "disabled": _vm.dataChannelStatus !== 'init' && _vm.dataChannelStatus !== 'created offer' }, on: { "click": function ($event) { _vm.createOffer(); } } }, [_vm._v("create\r\n\t\t\t\toffer")]) : _vm._e(), _vm._v(" "), (_vm.protocol === 'WebRTC') ? _c('button', { staticClass: "btn btn-default btn-sm", attrs: { "disabled": (_vm.dataChannelStatus !== 'init' && _vm.dataChannelStatus !== 'answered offer') || !_vm.sessionDescription }, on: { "click": function ($event) { _vm.answerOffer(); } } }, [_vm._v("answer\r\n\t\t\t\toffer")]) : _vm._e(), _vm._v(" "), (_vm.protocol === 'WebRTC') ? _c('button', { staticClass: "btn btn-default btn-sm", attrs: { "disabled": _vm.dataChannelStatus !== 'created offer' || !_vm.sessionDescription }, on: { "click": function ($event) { _vm.setAnswer(); } } }, [_vm._v("set\r\n\t\t\t\tanswer")]) : _vm._e(), _vm._v(" "), _c('button', { staticClass: "btn btn-default btn-sm", on: { "click": function ($event) { _vm.showTips(); } } }, [_vm._v("show tips")]), _vm._v(" "), (_vm.protocol === 'WebSocket') ? _c('button', { staticClass: "btn btn-default btn-sm", on: { "click": function ($event) { _vm.toggleSocketIO(); } } }, [_vm._v(_vm._s(_vm.socketIOIsHidden ? "show socket.io" : "hide socket.io"))]) : _vm._e(), _vm._v(" "), (_vm.protocol === 'WebSocket' || _vm.protocol === 'TCP') ? _c('button', { staticClass: "btn btn-default btn-sm", on: { "click": function ($event) { _vm.toggleStomp(); } } }, [_vm._v(_vm._s(_vm.stompIsHidden ? "show stomp" : "hide stomp"))]) : _vm._e(), _vm._v(" "), (_vm.protocol === 'WebSocket') ? _c('button', { staticClass: "btn btn-default btn-sm", on: { "click": function ($event) { _vm.toggleBayeux(); } } }, [_vm._v(_vm._s(_vm.bayeuxIsHidden ? "show bayeux" : "hide bayeux"))]) : _vm._e(), _vm._v(" "), (_vm.protocol !== 'HTTP') ? _c('button', { staticClass: "btn btn-default btn-sm", on: { "click": function ($event) { _vm.toggleProtobuf(); } } }, [_vm._v(_vm._s(_vm.protobufIsHidden ? "show protobuf" : "hide protobuf"))]) : _vm._e(), _vm._v(" "), (_vm.protocol === 'UDP') ? _c('button', { staticClass: "btn btn-default btn-sm", on: { "click": function ($event) { _vm.toggleDNS(); } } }, [_vm._v(_vm._s(_vm.dnsIsHidden ? "show DNS" : "hide DNS"))]) : _vm._e()])]), _vm._v(" "), (!_vm.socketIOIsHidden && _vm.protocol === 'WebSocket') ? _c('div', { staticClass: "row" }, [_c('div', { staticClass: "col-md-12" }, [_c('label', [_c('input', { directives: [{ name: "model", rawName: "v-model", value: (_vm.isSocketIO), expression: "isSocketIO" }], attrs: { "type": "checkbox", "disabled": _vm.isConnected }, domProps: { "checked": Array.isArray(_vm.isSocketIO) ? _vm._i(_vm.isSocketIO, null) > -1 : (_vm.isSocketIO) }, on: { "change": function ($event) { var $$a = _vm.isSocketIO, $$el = $event.target, $$c = $$el.checked ? (true) : (false); if (Array.isArray($$a)) {
                            var $$v = null, $$i = _vm._i($$a, $$v);
                            if ($$el.checked) {
                                $$i < 0 && (_vm.isSocketIO = $$a.concat([$$v]));
                            }
                            else {
                                $$i > -1 && (_vm.isSocketIO = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));
                            }
                        }
                        else {
                            _vm.isSocketIO = $$c;
                        } } } }), _vm._v(" socket.io\r\n\t\t\t")]), _vm._v(" "), _c('label', [_c('input', { directives: [{ name: "model", rawName: "v-model", value: (_vm.ignorePing), expression: "ignorePing" }], attrs: { "type": "checkbox", "disabled": _vm.isConnected || !_vm.isSocketIO }, domProps: { "checked": Array.isArray(_vm.ignorePing) ? _vm._i(_vm.ignorePing, null) > -1 : (_vm.ignorePing) }, on: { "change": function ($event) { var $$a = _vm.ignorePing, $$el = $event.target, $$c = $$el.checked ? (true) : (false); if (Array.isArray($$a)) {
                            var $$v = null, $$i = _vm._i($$a, $$v);
                            if ($$el.checked) {
                                $$i < 0 && (_vm.ignorePing = $$a.concat([$$v]));
                            }
                            else {
                                $$i > -1 && (_vm.ignorePing = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));
                            }
                        }
                        else {
                            _vm.ignorePing = $$c;
                        } } } }), _vm._v(" will hide ping/pong of\r\n\t\t\t\tsocket.io\r\n\t\t\t")]), _vm._v(" "), _c('button', { staticClass: "btn btn-link btn-sm", on: { "click": function ($event) { _vm.useSocketIOSendMessage(); } } }, [_vm._v("use socket.io to send message")])])]) : _vm._e(), _vm._v(" "), (!_vm.stompIsHidden && (_vm.protocol === 'WebSocket' || _vm.protocol === 'TCP')) ? _c('div', { staticClass: "row" }, [_c('div', { staticClass: "col-md-12" }, [_c('button', { staticClass: "btn btn-link btn-sm", on: { "click": function ($event) { _vm.useStompConnectionMessage(); } } }, [_vm._v("use stomp connection message")]), _vm._v(" "), _c('button', { staticClass: "btn btn-link btn-sm", on: { "click": function ($event) { _vm.useStompSubscriptionMessage(); } } }, [_vm._v("use stomp subscription message")]), _vm._v(" "), _c('button', { staticClass: "btn btn-link btn-sm", on: { "click": function ($event) { _vm.useStompSendMessage(); } } }, [_vm._v("use stomp send message")])])]) : _vm._e(), _vm._v(" "), (!_vm.bayeuxIsHidden && _vm.protocol === 'WebSocket') ? _c('div', { staticClass: "row" }, [_c('div', { staticClass: "col-md-12" }, [_c('button', { staticClass: "btn btn-link btn-sm", on: { "click": function ($event) { _vm.useBayeuxHandshakeMessage(); } } }, [_vm._v("use bayeux handshake message")]), _vm._v(" "), _c('button', { staticClass: "btn btn-link btn-sm", on: { "click": function ($event) { _vm.useBayeuxSubscribeMessage(); } } }, [_vm._v("use bayeux subscribe message")]), _vm._v(" "), _c('button', { staticClass: "btn btn-link btn-sm", on: { "click": function ($event) { _vm.useBayeuxPublishMessage(); } } }, [_vm._v("use bayeux publish message")]), _vm._v(" "), _c('button', { staticClass: "btn btn-link btn-sm", on: { "click": function ($event) { _vm.useBayeuxPingMessage(); } } }, [_vm._v("use bayeux ping message")])])]) : _vm._e(), _vm._v(" "), _c('div', { staticClass: "row d-none" }, [(_vm.protocol !== 'HTTP' || _vm.shouldContainBody) ? _c('div', { staticClass: "col-md-12" }, [(_vm.protocol !== 'HTTP' || _vm.shouldContainBody) ? _c('label', [_c('input', { directives: [{ name: "model", rawName: "v-model", value: (_vm.messageType), expression: "messageType" }], attrs: { "type": "radio", "value": "string" }, domProps: { "checked": _vm._q(_vm.messageType, "string") }, on: { "change": function ($event) { _vm.messageType = "string"; } } }), _vm._v(" string\r\n\t\t\t")]) : _vm._e(), _vm._v(" "), (_vm.protocol !== 'HTTP') ? _c('label', [_c('input', { directives: [{ name: "model", rawName: "v-model", value: (_vm.messageType), expression: "messageType" }], attrs: { "type": "radio", "value": "Uint8Array" }, domProps: { "checked": _vm._q(_vm.messageType, "Uint8Array") }, on: { "change": function ($event) { _vm.messageType = "Uint8Array"; } } }), _vm._v(" Uint8Array\r\n\t\t\t")]) : _vm._e(), _vm._v(" "), (_vm.protocol !== 'HTTP') ? _c('label', [_c('input', { directives: [{ name: "model", rawName: "v-model", value: (_vm.messageType), expression: "messageType" }], attrs: { "type": "radio", "value": "protobuf" }, domProps: { "checked": _vm._q(_vm.messageType, "protobuf") }, on: { "change": function ($event) { _vm.messageType = "protobuf"; } } }), _vm._v(" protobuf\r\n\t\t\t")]) : _vm._e(), _vm._v(" "), (_vm.protocol === 'HTTP' && _vm.shouldContainBody) ? _c('label', [_c('input', { directives: [{ name: "model", rawName: "v-model", value: (_vm.messageType), expression: "messageType" }], attrs: { "type": "radio", "value": "FormData" }, domProps: { "checked": _vm._q(_vm.messageType, "FormData") }, on: { "change": function ($event) { _vm.messageType = "FormData"; } } }), _vm._v(" FormData\r\n\t\t\t")]) : _vm._e()]) : _vm._e()]), _vm._v(" "), (!_vm.protobufIsHidden) ? _c('div', { staticClass: "row" }, [_c('div', { staticClass: "col-md-5" }, [_c('textarea', { directives: [{ name: "model", rawName: "v-model", value: (_vm.protobufContent), expression: "protobufContent" }], staticClass: "form-control", staticStyle: { "width": "100%", "height": "150px" }, attrs: { "placeholder": "protobuf file content" }, domProps: { "value": (_vm.protobufContent) }, on: { "input": function ($event) { if ($event.target.composing) {
                        return;
                    } _vm.protobufContent = $event.target.value; } } })]), _vm._v(" "), _c('div', { staticClass: "col-md-3" }, [_c('input', { directives: [{ name: "model", rawName: "v-model", value: (_vm.protobufTypePath), expression: "protobufTypePath" }], staticClass: "form-control input-sm", attrs: { "type": "text", "placeholder": "protobuf type path" }, domProps: { "value": (_vm.protobufTypePath) }, on: { "input": function ($event) { if ($event.target.composing) {
                        return;
                    } _vm.protobufTypePath = $event.target.value; } } })]), _vm._v(" "), _c('div', { staticClass: "col-md-4" }, [_c('button', { staticClass: "btn btn-link btn-sm", attrs: { "disabled": !_vm.protobufContent || !_vm.protobufTypePath }, on: { "click": function ($event) { _vm.loadProtobuf(); } } }, [_vm._v("load")])])]) : _c('div', { staticClass: "row sendSection d-none" }, [_c('h3', { staticClass: "col-md-12" }, [_vm._v("发送区：")]), _vm._v(" "), (_vm.protocol !== 'HTTP' || _vm.shouldContainBody) ? _c('div', { staticClass: "col-md-10 sendText" }, [(!_vm.isPreview) ? [(_vm.shouldShowMessageTextarea) ? _c('textarea', { directives: [{ name: "model", rawName: "v-model", value: (_vm.message), expression: "message" }], staticClass: "form-control", domProps: { "value": (_vm.message) }, on: { "input": function ($event) { if ($event.target.composing) {
                            return;
                        } _vm.message = $event.target.value; } } }) : _vm._l((_vm.formDatas), function (formData, index) { return _c('div', { key: formData.key, staticClass: "row" }, [_c('div', { staticClass: "col-md-3" }, [_c('input', { staticClass: "form-control input-sm", attrs: { "type": "text", "placeholder": "form data name" }, domProps: { "value": formData.key }, on: { "keyup": function ($event) { _vm.setKeyOfFormData(index, $event); } } })]), _vm._v(" "), _c('div', { staticClass: "col-md-5" }, [(formData.type === 'text') ? _c('input', { staticClass: "form-control input-sm", attrs: { "type": "text", "placeholder": "form data value" }, domProps: { "value": formData.value }, on: { "keyup": function ($event) { _vm.setValueOfFormData(index, $event); } } }) : _c('input', { staticClass: "form-control input-sm", attrs: { "type": "file", "placeholder": "form data value" }, on: { "change": function ($event) { _vm.setValueOfFormData(index, $event); } } })]), _vm._v(" "), _c('div', { staticClass: "col-md-2" }, [_c('select', { staticClass: "form-control", domProps: { "value": formData.type }, on: { "change": function ($event) { _vm.setTypeOfFormData(index, $event); } } }, [_c('option', { attrs: { "value": "text" } }, [_vm._v("text")]), _vm._v(" "), _c('option', { attrs: { "value": "file" } }, [_vm._v("file")])])]), _vm._v(" "), _c('div', { staticClass: "col-md-2" }, [_c('button', { staticClass: "btn btn-link btn-sm", on: { "click": function ($event) { _vm.deleteFormData(index); } } }, [_vm._v("delete")])])]); })] : _c('pre', [_vm._v(_vm._s(_vm.previewResult))])], 2) : _vm._e(), _vm._v(" "), (_vm.protocol === 'WebSocket' || _vm.protocol === 'HTTP') ? _c('div', { staticClass: "col-md-6" }, [_vm._l((_vm.parameters), function (parameter, index) { return _c('div', { key: parameter.key, staticClass: "row" }, [_c('div', { staticClass: "col-md-3" }, [_c('input', { staticClass: "form-control input-sm", attrs: { "type": "text", "placeholder": "parameter name" }, domProps: { "value": parameter.key }, on: { "keyup": function ($event) { _vm.setKeyOfParameter(index, $event); } } })]), _vm._v(" "), _c('div', { staticClass: "col-md-7" }, [_c('input', { staticClass: "form-control input-sm", attrs: { "type": "text", "placeholder": "parameter value" }, domProps: { "value": parameter.value }, on: { "keyup": function ($event) { _vm.setValueOfParameter(index, $event); } } })]), _vm._v(" "), _c('div', { staticClass: "col-md-2" }, [_c('button', { staticClass: "btn btn-link btn-sm", on: { "click": function ($event) { _vm.deleteParameter(index); } } }, [_vm._v("delete")])])]); }), _vm._v(" "), _vm._l((_vm.headers), function (header, index) { return (_vm.protocol === 'HTTP') ? _c('div', { key: header.key, staticClass: "row" }, [_c('div', { staticClass: "col-md-3" }, [_c('input', { staticClass: "form-control input-sm", attrs: { "type": "text", "placeholder": "header name" }, domProps: { "value": header.key }, on: { "keyup": function ($event) { _vm.setKeyOfHeader(index, $event); } } })]), _vm._v(" "), _c('div', { staticClass: "col-md-7" }, [_c('input', { staticClass: "form-control input-sm", attrs: { "type": "text", "placeholder": "header value" }, domProps: { "value": header.value }, on: { "keyup": function ($event) { _vm.setValueOfHeader(index, $event); } } })]), _vm._v(" "), _c('div', { staticClass: "col-md-2" }, [_c('button', { staticClass: "btn btn-link btn-sm", on: { "click": function ($event) { _vm.deleteHeader(index); } } }, [_vm._v("delete")])])]) : _vm._e(); })], 2) : _vm._e(), _vm._v(" "), _c('div', { staticClass: "col-md-2 sendSection-btn" }, [_c('button', { staticClass: "btn btn-primary btn-sm", attrs: { "disabled": _vm.isDisconnected }, on: { "click": function ($event) { _vm.sendMessage(); } } }, [_vm._v("发送")]), _vm._v(" "), _c('button', { staticClass: "btn btn-link btn-sm" }, [_vm._v("清空")])])]), _vm._v(" "), (!_vm.dnsIsHidden) ? _c('div', { staticClass: "row" }, [_c('div', { staticClass: "col-md-5" }, [_c('input', { directives: [{ name: "model", rawName: "v-model", value: (_vm.dnsQuestionName), expression: "dnsQuestionName" }], staticClass: "form-control input-sm", attrs: { "type": "text", "placeholder": "DNS question name" }, domProps: { "value": (_vm.dnsQuestionName) }, on: { "input": function ($event) { if ($event.target.composing) {
                        return;
                    } _vm.dnsQuestionName = $event.target.value; } } })]), _vm._v(" "), _c('div', { staticClass: "col-md-3" }, [_c('input', { directives: [{ name: "model", rawName: "v-model", value: (_vm.dnsTransactionId), expression: "dnsTransactionId" }], staticClass: "form-control input-sm", attrs: { "type": "number", "placeholder": "DNS transaction ID" }, domProps: { "value": (_vm.dnsTransactionId) }, on: { "input": function ($event) { if ($event.target.composing) {
                        return;
                    } _vm.dnsTransactionId = $event.target.value; } } })])]) : _vm._e(), _vm._v(" "), _c('div', { staticClass: "row d-none" }, [_c('div', { staticClass: "col-md-12" }, [(_vm.messageType !== 'FormData' && !_vm.isPreview) ? _c('button', { staticClass: "btn btn-default btn-sm", attrs: { "disabled": _vm.message === '' }, on: { "click": function ($event) { _vm.previewMessage(); } } }, [_vm._v("preview\r\n\t\t\t\tmessage")]) : _vm._e(), _vm._v(" "), (_vm.messageType !== 'FormData' && _vm.isPreview) ? _c('button', { staticClass: "btn btn-default btn-sm", attrs: { "disabled": _vm.message === '' }, on: { "click": function ($event) { _vm.cancelPreview(); } } }, [_vm._v("cancel\r\n\t\t\t\tpreview")]) : _vm._e(), _vm._v(" "), _c('button', { staticClass: "btn btn-primary btn-sm", attrs: { "disabled": _vm.isDisconnected }, on: { "click": function ($event) { _vm.sendMessage(); } } }, [_vm._v("send message")]), _vm._v(" "), _c('button', { staticClass: "btn btn-default btn-sm", attrs: { "disabled": _vm.messages.length === 0 }, on: { "click": function ($event) { _vm.clear(); } } }, [_vm._v("clear")]), _vm._v(" "), _c('button', { staticClass: "btn btn-default btn-sm", on: { "click": function ($event) { _vm.savingAsBookmark(); } } }, [_vm._v(_vm._s(_vm.isEditing ? "cancel bookmark" : "save as bookmark"))]), _vm._v(" "), _c('button', { staticClass: "btn btn-default btn-sm", on: { "click": function ($event) { _vm.toggleFilter(); } } }, [_vm._v(_vm._s(_vm.filterIsHidden ? "show filter" : "hide filter"))])])]), _vm._v(" "), (_vm.isEditing) ? _c('div', { staticClass: "row" }, [_c('div', { staticClass: "col-md-4" }, [_c('input', { directives: [{ name: "model", rawName: "v-model", value: (_vm.bookmarkName), expression: "bookmarkName" }], ref: "bookmarkName", staticClass: "form-control input-sm", attrs: { "type": "text", "placeholder": "bookmark name" }, domProps: { "value": (_vm.bookmarkName) }, on: { "input": function ($event) { if ($event.target.composing) {
                        return;
                    } _vm.bookmarkName = $event.target.value; } } })]), _vm._v(" "), _c('div', { staticClass: "col-md-2" }, [_c('button', { staticClass: "btn btn-link btn-sm", attrs: { "disabled": !_vm.canSaveAsBookmark }, on: { "click": function ($event) { _vm.saveAsBookmark(); } } }, [_vm._v("save")])])]) : _vm._e(), _vm._v(" "), (!_vm.filterIsHidden) ? _c('div', { staticClass: "row" }, [_c('div', { staticClass: "col-md-6" }, [_c('input', { directives: [{ name: "model", rawName: "v-model", value: (_vm.filter), expression: "filter" }], ref: "filter", staticClass: "form-control input-sm", attrs: { "type": "text", "placeholder": "filter" }, domProps: { "value": (_vm.filter) }, on: { "input": function ($event) { if ($event.target.composing) {
                        return;
                    } _vm.filter = $event.target.value; } } })])]) : _vm._e(), _vm._v(" "), _c('div', { staticClass: "row d-none" }, [_c('div', { staticClass: "col-md-12" }, [_c('label', [_c('input', { directives: [{ name: "model", rawName: "v-model", value: (_vm.showRaw), expression: "showRaw" }], attrs: { "type": "checkbox" }, domProps: { "checked": Array.isArray(_vm.showRaw) ? _vm._i(_vm.showRaw, null) > -1 : (_vm.showRaw) }, on: { "change": function ($event) { var $$a = _vm.showRaw, $$el = $event.target, $$c = $$el.checked ? (true) : (false); if (Array.isArray($$a)) {
                            var $$v = null, $$i = _vm._i($$a, $$v);
                            if ($$el.checked) {
                                $$i < 0 && (_vm.showRaw = $$a.concat([$$v]));
                            }
                            else {
                                $$i > -1 && (_vm.showRaw = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));
                            }
                        }
                        else {
                            _vm.showRaw = $$c;
                        } } } }), _vm._v(" show raw data\r\n\t\t\t")]), _vm._v(" "), _c('label', [_c('input', { directives: [{ name: "model", rawName: "v-model", value: (_vm.showFormatted), expression: "showFormatted" }], attrs: { "type": "checkbox" }, domProps: { "checked": Array.isArray(_vm.showFormatted) ? _vm._i(_vm.showFormatted, null) > -1 : (_vm.showFormatted) }, on: { "change": function ($event) { var $$a = _vm.showFormatted, $$el = $event.target, $$c = $$el.checked ? (true) : (false); if (Array.isArray($$a)) {
                            var $$v = null, $$i = _vm._i($$a, $$v);
                            if ($$el.checked) {
                                $$i < 0 && (_vm.showFormatted = $$a.concat([$$v]));
                            }
                            else {
                                $$i > -1 && (_vm.showFormatted = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));
                            }
                        }
                        else {
                            _vm.showFormatted = $$c;
                        } } } }), _vm._v(" show formatted data\r\n\t\t\t")])])]), _vm._v(" "), _c('div', { staticClass: "row receiveSection" }, [_c('h3', { staticClass: "col-md-12" }, [_vm._v("\r\n\t\t\t链路状态：\r\n\t\t\t"), _vm._v(" "), (_vm.errorStatus === 200) ? _c('span', { staticClass: "badge badge-success" }, [_vm._v("正常")]) : (_vm.errorStatus === 401) ? _c('span', { staticClass: "badge badge-danger" }, [_vm._v("主站通讯故障")]) : (_vm.errorStatus === 402) ? _c('span', { staticClass: "badge badge-danger" }, [_vm._v("主站报文错误")]) : (_vm.errorStatus === 403) ? _c('span', { staticClass: "badge badge-danger" }, [_vm._v("从站报文错误")]) : (_vm.errorStatus === 501) ? _c('span', { staticClass: "badge badge-info" }, [_vm._v("未连接")]) : (_vm.errorStatus === 502) ? _c('span', { staticClass: "badge badge-info" }, [_vm._v("已连接")]) : (_vm.errorStatus === 503) ? _c('span', { staticClass: "badge badge-info" }, [_vm._v("已断开")]) : _vm._e()]), _vm._v(" "), _c('div', { staticClass: "col-md-12" }, [_c('h3', [_vm._v("错误记录：")]), _vm._v(" "), _c('table', { staticClass: "table table-striped text-center", staticStyle: { "background": "#fff" } }, [_vm._m(0), _vm._v(" "), _vm._l((_vm.errorMsgs), function (item, index) { return _c('tr', { key: index }, [_c('td', { domProps: { "textContent": _vm._s(index + 1) } }), _vm._v(" "), _c('td', { domProps: { "textContent": _vm._s(item.moment) } }), _vm._v(" "), _c('td', { domProps: { "textContent": _vm._s(item.mainPack) } }), _vm._v(" "), _c('td', { domProps: { "textContent": _vm._s(item.subPack) } }), _vm._v(" "), _c('td', { domProps: { "textContent": _vm._s(item.msgStatus) } })]); })], 2)]), _vm._v(" "), (_vm.showPackDeatil) ? _c('div', { staticClass: "col-md-12" }, [_c('h3', [_vm._v("详细报文：")]), _vm._v(" "), _c('ul', _vm._l((_vm.filteredMessages), function (message, index) { return (message.rawData || message.type === 'out') ? _c('li', { key: message.id, staticClass: "visibility-button-container" }, [_c('span', { staticClass: "label label-default" }, [_vm._v("[" + _vm._s(message.moment.split(" ")[1]) + "]")]), _vm._v(" "), (message.type === 'out') ? _c('span', { staticClass: "label label-info" }, [_vm._v("发送成功 ")]) : _vm._e(), _vm._v(" "), (message.type === 'in') ? _c('span', { staticClass: "label label-info" }, [_vm._v("接收 ")]) : _vm._e(), _vm._v(" "), (message.type === 'connect') ? _c('span', { staticClass: "label label-info" }, [_vm._v("连接成功 ")]) : _vm._e(), _vm._v(" "), (message.type === 'disconnect') ? _c('span', { staticClass: "label label-info" }, [_vm._v("断开 ")]) : _vm._e(), _vm._v(" "), (message.reason) ? _c('span', [_vm._v(_vm._s(message.reason))]) : _vm._e(), _vm._v(" "), (message.data) ? _c('span', [_vm._v(_vm._s(message.data))]) : _vm._e(), _vm._v(" "), (message.rawData && message.type === 'in') ? [(message.visible !== undefined ? message.visible : _vm.showRaw) ? _c('span', { attrs: { "id": _vm.resultId(message.id) } }, [_vm._v(_vm._s(message.rawData))]) : _vm._e()] : _vm._e(), _vm._v(" "), (message.tips) ? _c('pre', { attrs: { "id": _vm.resultId(message.id) } }, [_vm._v(_vm._s(message.tips))]) : _vm._e()], 2) : _vm._e(); })), _vm._v(" "), _c('div', { staticClass: "text-right" }, [_c('button', { staticClass: "btn btn-link btn-sm", attrs: { "disabled": _vm.messages.length === 0 }, on: { "click": function ($event) { _vm.clear(); } } }, [_vm._v("清空")])])]) : _vm._e()])]); }
// @ts-ignore
export var appTemplateHtmlStatic = [function () { var _vm = this; var _h = _vm.$createElement; var _c = _vm._self._c || _h; return _c('tr', [_c('th', [_vm._v("#")]), _vm._v(" "), _c('th', [_vm._v("时间")]), _vm._v(" "), _c('th', [_vm._v("主站报文")]), _vm._v(" "), _c('th', [_vm._v("从站报文")]), _vm._v(" "), _c('th', [_vm._v("错误信息")])]); }];
// tslint:enable
